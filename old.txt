provider "aws" {
  region = "eu-north-1"
}

# VPC Configuration
module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "3.5.0"

  name = "eventat-vpc"
  cidr = "10.0.0.0/16"

  azs             = ["eu-north-1a", "eu-north-1b"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
  public_subnets  = ["10.0.3.0/24", "10.0.4.0/24"]

  enable_nat_gateway = true
  single_nat_gateway = true

  tags = {
    Terraform = "true"
    Environment = "dev"
  }
}

# DynamoDB for storing Users, Events, and RSVPs
resource "aws_dynamodb_table" "users" {
  name           = "eventat-users"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "id"

  attribute {
    name = "id"
    type = "S"
  }

  attribute {
    name = "email"
    type = "S"
  }

  global_secondary_index {
    name            = "email-index"
    hash_key        = "email"
    projection_type = "ALL"
  }

  tags = {
    Environment = "dev"
  }
}

resource "aws_dynamodb_table" "events" {
  name           = "eventat-events"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "id"

  attribute {
    name = "id"
    type = "S"
  }

  tags = {
    Environment = "dev"
  }
}

resource "aws_dynamodb_table" "rsvps" {
  name           = "eventat-rsvps"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "event_id"   # Partition key
  range_key      = "user_id"    # Sort key

  attribute {
    name = "event_id"
    type = "S"
  }

  attribute {
    name = "user_id"
    type = "S"
  }

  tags = {
    Environment = "dev"
  }
}


# IAM Role for Lambda
resource "aws_iam_role" "lambda_exec" {
  name = "eventat-lambda-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_policy_attachment" "lambda_basic_execution" {
  name       = "attach-lambda-basic"
  roles      = [aws_iam_role.lambda_exec.name]
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# Lambda Function (Placeholder)
resource "aws_lambda_function" "placeholder" {
  function_name = "eventat-lambda"
  role          = aws_iam_role.lambda_exec.arn
  handler       = "index.handler"
  runtime       = "nodejs18.x"

  filename         = "placeholder.zip" # Placeholder zip file
  source_code_hash = filebase64sha256("placeholder.zip")

  environment {
    variables = {
      USERS_TABLE  = aws_dynamodb_table.users.name
      EVENTS_TABLE = aws_dynamodb_table.events.name
      RSVPS_TABLE  = aws_dynamodb_table.rsvps.name
    }
  }
}

resource "aws_lambda_function" "create_user" {
  function_name = "eventat-create-user"
  role          = aws_iam_role.lambda_exec.arn
  handler       = "createUser.handler"
  runtime       = "nodejs18.x"

  filename         = "createUser.zip" # Zip file containing the Lambda code
  source_code_hash = filebase64sha256("createUser.zip")

  environment {
    variables = {
      USERS_TABLE = aws_dynamodb_table.users.name
    }
  }
}

# Lambda Function: Get All Users
resource "aws_lambda_function" "get_users" {
  function_name = "eventat-get-users"
  role          = aws_iam_role.lambda_exec.arn
  handler       = "getUsers.handler"
  runtime       = "nodejs18.x"

  filename         = "getUsers.zip" # Zip file containing the Lambda code
  source_code_hash = filebase64sha256("getUsers.zip")

  environment {
    variables = {
      USERS_TABLE = aws_dynamodb_table.users.name
    }
  }
}

# Lambda Function: Delete User
resource "aws_lambda_function" "delete_user" {
  function_name = "eventat-delete-user"
  role          = aws_iam_role.lambda_exec.arn
  handler       = "deleteUser.handler"
  runtime       = "nodejs18.x"

  filename         = "deleteUser.zip" # Zip file containing the Lambda code
  source_code_hash = filebase64sha256("deleteUser.zip")

  environment {
    variables = {
      USERS_TABLE = aws_dynamodb_table.users.name
    }
  }
}

# API Gateway Routes for Users Table
resource "aws_apigatewayv2_route" "get_users_route" {
  depends_on = [aws_apigatewayv2_integration.get_users_integration]

  api_id    = aws_apigatewayv2_api.http_api.id
  route_key = "GET /users"
  target    = "integrations/${aws_apigatewayv2_integration.get_users_integration.id}"
}

resource "aws_apigatewayv2_route" "delete_user_route" {
  depends_on = [aws_apigatewayv2_integration.delete_user_integration]

  api_id    = aws_apigatewayv2_api.http_api.id
  route_key = "DELETE /users/{id}"
  target    = "integrations/${aws_apigatewayv2_integration.delete_user_integration.id}"
}

# API Gateway Integrations for Users Table
resource "aws_apigatewayv2_integration" "get_users_integration" {
  api_id           = aws_apigatewayv2_api.http_api.id
  integration_type = "AWS_PROXY"
  integration_uri  = aws_lambda_function.get_users.invoke_arn

  payload_format_version = "2.0"
}

resource "aws_apigatewayv2_integration" "delete_user_integration" {
  api_id           = aws_apigatewayv2_api.http_api.id
  integration_type = "AWS_PROXY"
  integration_uri  = aws_lambda_function.delete_user.invoke_arn

  payload_format_version = "2.0"
}


resource "aws_lambda_permission" "api_gateway_permissions" {
  for_each = {
    create_user = aws_lambda_function.create_user.function_name
    get_users   = aws_lambda_function.get_users.function_name
    delete_user = aws_lambda_function.delete_user.function_name
  }

  statement_id  = "AllowApiGatewayInvoke-${each.key}"
  action        = "lambda:InvokeFunction"
  function_name = each.value
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_apigatewayv2_api.http_api.execution_arn}/*"
}


resource "aws_iam_policy" "lambda_dynamodb_access" {
  name = "lambda-dynamodb-access"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect   = "Allow",
        Action   = [
          "dynamodb:PutItem",
          "dynamodb:GetItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem",
          "dynamodb:Scan"
        ],
        Resource = "arn:aws:dynamodb:eu-north-1:050752624121:table/eventat-users"
      }
    ]
  })
}

resource "aws_iam_policy_attachment" "lambda_dynamodb_attach" {
  name       = "attach-lambda-dynamodb-policy"
  roles      = [aws_iam_role.lambda_exec.name]
  policy_arn = aws_iam_policy.lambda_dynamodb_access.arn
}


resource "aws_apigatewayv2_route" "create_user_route" {
  depends_on = [aws_apigatewayv2_integration.create_user_integration]

  api_id    = aws_apigatewayv2_api.http_api.id
  route_key = "POST /users"
  target    = "integrations/${aws_apigatewayv2_integration.create_user_integration.id}"
}



resource "aws_apigatewayv2_integration" "create_user_integration" {
  api_id           = aws_apigatewayv2_api.http_api.id
  integration_type = "AWS_PROXY"
  integration_uri  = aws_lambda_function.create_user.invoke_arn

  payload_format_version = "2.0"
}


# API Gateway (Placeholder)
resource "aws_apigatewayv2_api" "http_api" {
  name          = "eventat-api"
  protocol_type = "HTTP"
}

resource "aws_apigatewayv2_stage" "default" {
  api_id      = aws_apigatewayv2_api.http_api.id
  name        = "default"
  auto_deploy = true
}

output "vpc_id" {
  value = module.vpc.vpc_id
}

output "public_subnets" {
  value = module.vpc.public_subnets
}

output "private_subnets" {
  value = module.vpc.private_subnets
}

output "users_table" {
  value = aws_dynamodb_table.users.name
}

output "events_table" {
  value = aws_dynamodb_table.events.name
}

output "rsvps_table" {
  value = aws_dynamodb_table.rsvps.name
}

output "api_endpoint" {
  value = aws_apigatewayv2_api.http_api.api_endpoint
}

output "create_user_route" {
  value = aws_apigatewayv2_route.create_user_route.route_key
}

output "create_user_integration_uri" {
  value = aws_apigatewayv2_integration.create_user_integration.integration_uri
}